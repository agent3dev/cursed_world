#include "../include/ComputeConfig.h"
#include <iostream>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <cstring>

ComputeConfig::ComputeConfig()
    : preferred_backend_(BackendType::AUTO),
      fallback_to_cpu_(true),
      auto_threshold_(20),  // Switch to GPU at 20+ agents
      config_file_path_("") {
}

bool ComputeConfig::parseCommandLine(int argc, char* argv[]) {
    for (int i = 1; i < argc; i++) {
        std::string arg = argv[i];

        // Skip non-option arguments
        if (arg.empty() || arg[0] != '-') {
            continue;
        }

        // Handle --backend=value
        if (arg.find("--backend=") == 0) {
            std::string value = arg.substr(10);
            preferred_backend_ = parseBackendArgument(value);
            continue;
        }

        // Handle --no-fallback
        if (arg == "--no-fallback") {
            fallback_to_cpu_ = false;
            continue;
        }

        // Handle --config=value
        if (arg.find("--config=") == 0) {
            std::string value = arg.substr(9);
            if (!loadConfig(value)) {
                std::cerr << "[ComputeConfig] Failed to load config from: " << value << "\n";
                return false;
            }
            continue;
        }

        // Handle --auto-threshold=value
        if (arg.find("--auto-threshold=") == 0) {
            std::string value = arg.substr(17);
            try {
                auto_threshold_ = std::stoi(value);
            } catch (...) {
                std::cerr << "[ComputeConfig] Invalid auto-threshold value: " << value << "\n";
                return false;
            }
            continue;
        }

        // Handle --benchmark-backends flag
        if (arg == "--benchmark-backends") {
            std::cout << "[ComputeConfig] Benchmark mode requested\n";
            // This is handled by the caller
            continue;
        }
    }

    return true;
}

bool ComputeConfig::loadConfig(const std::string& filepath) {
    config_file_path_ = filepath;
    return loadFromFile(filepath);
}

bool ComputeConfig::loadFromFile(const std::string& filepath) {
    std::ifstream file(filepath);
    if (!file.is_open()) {
        return false;
    }

    std::string line;
    while (std::getline(file, line)) {
        // Skip empty lines and comments
        if (line.empty() || line[0] == '#') {
            continue;
        }

        // Parse key: value format
        size_t colon_pos = line.find(':');
        if (colon_pos == std::string::npos) {
            continue;
        }

        std::string key = line.substr(0, colon_pos);
        std::string value = line.substr(colon_pos + 1);

        // Trim whitespace
        key.erase(0, key.find_first_not_of(" \t"));
        key.erase(key.find_last_not_of(" \t") + 1);
        value.erase(0, value.find_first_not_of(" \t"));
        value.erase(value.find_last_not_of(" \t") + 1);

        // Parse configuration options
        if (key == "backend" || key == "preferred_backend") {
            preferred_backend_ = stringToBackendType(value);
        } else if (key == "fallback_to_cpu") {
            fallback_to_cpu_ = (value == "true" || value == "1" || value == "yes");
        } else if (key == "auto_threshold") {
            try {
                auto_threshold_ = std::stoi(value);
            } catch (...) {
                std::cerr << "[ComputeConfig] Invalid auto_threshold in config: " << value << "\n";
            }
        }
    }

    file.close();
    return true;
}

bool ComputeConfig::saveConfig(const std::string& filepath) const {
    std::ofstream file(filepath);
    if (!file.is_open()) {
        return false;
    }

    file << "# Compute Backend Configuration\n";
    file << "# Generated by cursed_world evolution simulation\n\n";

    file << "# Backend selection: cpu, cuda, auto\n";
    file << "backend: " << backendTypeToString(preferred_backend_) << "\n\n";

    file << "# Enable fallback to CPU if preferred backend unavailable\n";
    file << "fallback_to_cpu: " << (fallback_to_cpu_ ? "true" : "false") << "\n\n";

    file << "# Population size threshold for AUTO mode\n";
    file << "# Use GPU when population >= this value\n";
    file << "auto_threshold: " << auto_threshold_ << "\n";

    file.close();
    return true;
}

BackendType ComputeConfig::selectBackend(int population_size) const {
    if (preferred_backend_ == BackendType::AUTO) {
        // Automatic selection based on population size
        if (population_size >= auto_threshold_) {
            return BackendType::CUDA;
        } else {
            return BackendType::CPU;
        }
    }

    return preferred_backend_;
}

void ComputeConfig::print() const {
    std::cout << "\n=== Compute Backend Configuration ===\n";
    std::cout << "Preferred backend: " << backendTypeToString(preferred_backend_) << "\n";
    std::cout << "Fallback to CPU: " << (fallback_to_cpu_ ? "enabled" : "disabled") << "\n";
    std::cout << "Auto threshold: " << auto_threshold_ << " agents\n";
    if (!config_file_path_.empty()) {
        std::cout << "Config file: " << config_file_path_ << "\n";
    }
    std::cout << "====================================\n\n";
}

std::string ComputeConfig::getDefaultConfigPath() {
    return "compute_config.yaml";
}

BackendType parseBackendArgument(const std::string& value) {
    std::string lower = value;
    std::transform(lower.begin(), lower.end(), lower.begin(), ::tolower);

    if (lower == "cpu") {
        return BackendType::CPU;
    } else if (lower == "cuda" || lower == "gpu") {
        return BackendType::CUDA;
    } else if (lower == "auto") {
        return BackendType::AUTO;
    }

    std::cerr << "[ComputeConfig] Unknown backend type: " << value << ", using AUTO\n";
    return BackendType::AUTO;
}

bool parseKeyValue(const std::string& arg, std::string& key, std::string& value) {
    size_t eq_pos = arg.find('=');
    if (eq_pos == std::string::npos) {
        return false;
    }

    key = arg.substr(0, eq_pos);
    value = arg.substr(eq_pos + 1);

    // Remove leading dashes from key
    while (!key.empty() && key[0] == '-') {
        key = key.substr(1);
    }

    return true;
}
